# Задание-1:
# Напишите функцию, округляющую полученное произвольное десятичное число
# до кол-ва знаков (кол-во знаков передается вторым аргументом).
# Округление должно происходить по математическим правилам (0.6 --> 1, 0.4 --> 0).
# Для решения задачи не используйте встроенные функции и функции из модуля math.


#def my_round(number, ndigits):

def my_round(number, digits):
  mult = pow(10.0, digits)
  return int (number*mult + 0.5) / mult

print(my_round(2.1234567, 5))
print(my_round(2.9999967, 5))



# Задание-2:
# Дан шестизначный номер билета. Определить, является ли билет счастливым.
# Решение реализовать в виде функции.
# Билет считается счастливым, если сумма его первых и последних цифр равны.
# !!!P.S.: функция не должна НИЧЕГО print'ить


#def lucky_ticket(ticket_number):
#    ticket_number = repr(ticket_number)
#    left_part = ticket_number[:3]
#    right_part = ticket_number[-3:]
#    def part_sum(str_part):
#           counter = 0
#           for n in str_part:
#                counter += int(n)
#                return counter

#    if part_sum(left_part) == part_sum(right_part) :
#          return True
#    else:
#            return False


#print(lucky_ticket(123006))
#print(lucky_ticket(123123))
#print(lucky_ticket(436751))

#NORMAL

# Задание-1:
# Напишите функцию, возвращающую ряд Фибоначчи с n-элемента до m-элемента.
# Первыми элементами ряда считать цифры 1 1

#def fibonacci(n, m):
#    pass

# Задача-2:
# Напишите функцию, сортирующую принимаемый список по возрастанию.
# Для сортировки используйте любой алгоритм (например пузырьковый).
# Для решения данной задачи нельзя использовать встроенную функцию и метод sort()


#def sort_to_max(origin_list):
#    pass

#sort_to_max = [2, 10, -12, 2.5, 20, -11, 4, 4, 0]
#n = len(sort_to_max)
#for j in range (0, n-1) :
#    for i in range (0, n-1) :
#        if sort_to_max[i] < sort_to_max[i-1] :
#            sort_to_max[i], sort_to_max[i-1] = sort_to_max [i-1], sort_to_max[i]
#            print(j, end= "")
#            print (sort_to_max)




#HARD


#Задание-1

#Написать консольное меню вида:

#1. Добавить
#2. Удалить
#3. Распечатать
#4. Посчитать
#5. Выйти

#Надо чтобы
#а) Можно было удобно менять порядок меню и\или добавлять\удалять пункты меню
#б) Каждое действие (добавить, удалить и тд) должно быть функцией
#в) У пользователя надо спросить номер команды
#г) Программа не должна завершаться пока не введется команда Выйти
#д) Проверять на ввод ошибочных данных, там где они могут появиться